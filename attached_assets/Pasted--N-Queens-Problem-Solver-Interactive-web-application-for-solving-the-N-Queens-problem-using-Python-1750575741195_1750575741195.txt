♕ N-Queens Problem Solver
Interactive web application for solving the N-Queens problem using Python and Streamlit. Features step-by-step visualization and finding all solutions using backtracking algorithm.

🎯 Features
✨ Main Features
Step-by-Step Visualization: Watch the algorithm process in real-time
Interactive Controls: Forward/backward step, reset and go to last step
Multiple Solution Finding: List and visualize all possible solutions
Conflict Analysis: Visually show queen placement conflicts
Search Tree: Visualize backtracking process in tree structure
🎨 Visual Features
Chess Board Visualization: Interactive board using Plotly
Color Coding: Color coding for different step types
Progress Indicator: Step-by-step progress status
Responsive Design: Mobile and desktop compatible interface
📊 Educational Features
Algorithm Explanation: Detailed algorithm principle and complexity analysis
Test Cases: Predefined test scenarios
Solution Statistics: Solution count and position information
CSV Download: Download found solutions in CSV format
🚀 Installation
Requirements
Python 3.8 or higher
pip (Python package manager)
Step-by-Step Installation
Clone the project:
git clone https://github.com/yourusername/n-queens-solver.git
cd n-queens-solver
Create virtual environment (recommended):
python -m venv venv
source venv/bin/activate  # Linux/Mac
# or
venv\Scripts\activate     # Windows
Install required packages:
pip install -r requirements.txt
Run the application:
streamlit run app.py
Open in browser:
http://localhost:8501
📁 Project Structure
n-queens-solver/
├── app.py              # Main Streamlit application
├── algorithm.py        # N-Queens backtracking algorithm
├── utils.py           # Visualization and helper functions
├── requirements.txt   # Python dependencies
├── README.md         # Project documentation
└── .gitignore        # Git ignore file
🎮 Usage
Step-by-Step Visualization Mode
Select Board Size: Choose size between 4x4 and 12x12 from sidebar
Select Mode: Choose "Step-by-Step Visualization" option
Start: Click "🚀 Start" button
Watch: Observe the algorithm step by step
Control: Use forward/backward buttons to control steps
Find All Solutions Mode
Select Board Size: Choose desired size from sidebar
Select Mode: Choose "Find All Solutions" option
Find Solutions: Click "🔍 Find Solutions" button
Review: Visualize found solutions
Download: Download solutions in CSV format
🔧 Technical Details
Algorithm Complexity
Time Complexity: O(N!)
Space Complexity: O(N)
Technologies Used
Streamlit: Web application framework
Plotly: Interactive visualization
Pandas: Data processing and table display
NumPy: Mathematical operations
Supported Board Sizes
Minimum: 4x4 (2 solutions)
Maximum: 12x12 (many solutions)
Recommended: 4x4 to 8x8 (for fast results)
📊 Test Cases
Board Size	Solution Count	Difficulty Level
4x4	2	Easy
5x5	10	Medium
6x6	4	Medium
8x8	92	Hard
10x10	724	Very Hard
🎨 Customization
Changing Color Theme
Edit the get_step_color() function in utils.py to change the color theme.

Adding New Test Cases
Add new test cases to the get_test_cases() function in utils.py.

Visualization Settings
Edit visualization functions in utils.py to customize appearance.

🐛 Troubleshooting
Common Issues
Streamlit not working:
pip install --upgrade streamlit
Plotly visualizations not showing:
pip install --upgrade plotly
Slow performance on large board sizes:
Large sizes above 10x10 may have long wait times
Use "Step-by-Step Visualization" instead of "Find All Solutions"
Performance Tips
Small board sizes (4x4 - 8x8) for fast results
Be patient with large sizes
Step-by-step mode runs faster
🤝 Contributing
Fork the project
Create feature branch (git checkout -b feature/AmazingFeature)
Commit your changes (git commit -m 'Add some AmazingFeature')
Push to branch (git push origin feature/AmazingFeature)
Create Pull Request
📝 License
This project is licensed under the MIT License. See LICENSE file for details.

👨‍💻 Developer
N-Queens Solver

GitHub: @yourusername
Email: your.email@example.com
🙏 Acknowledgments
Streamlit - Web application framework
Plotly - Interactive visualization
Backtracking Algorithm - Algorithm principle
📚 Additional Resources
N-Queens Problem Wikipedia
Backtracking Algorithm
Streamlit Documentation
Plotly Documentation
⭐ Don't forget to star this project if you liked it!